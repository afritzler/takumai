name: Cherry-pick PR on Comment

on:
  issue_comment:
    types: [created]

jobs:
  cherry-pick:
    if: github.event.issue.pull_request != null
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Validate cherry-pick comment
        id: comment-check
        run: |
          COMMENT="${{ github.event.comment.body }}"
          # Check if the comment contains the cherry-pick command with the correct format
          if [[ "$COMMENT" != "/cherry-pick release-"* ]]; then
            echo "Not a cherry-pick comment. Exiting."
            exit 0
          fi
          # Extract release branch from the comment
          BRANCH=$(echo "$COMMENT" | sed -n 's/^\/cherry-pick //p')
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Fetch all branches
        run: git fetch --all

      - name: Configure Git author
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Get PR head SHA
        id: get_pr_sha
        uses: actions/github-script@v6
        with:
          script: |
            const prUrl = context.payload.issue.pull_request.url;
            const pr = await github.request(`GET ${prUrl}`);
            console.log("PR Head SHA: " + pr.data.head.sha);
            return pr.data.head.sha;

      - name: Cherry-pick the PR
        id: cherry-pick
        run: |
          # Extract PR number
          PR_NUMBER=${{ github.event.issue.number }}
          
          # Extract the target branch from the comment
          TARGET_BRANCH=${{ steps.comment-check.outputs.branch }}
          
          # Get PR head commit SHA from the previous step
          PR_HEAD_REF="${{ steps.get_pr_sha.outputs.result }}"
          
          echo "PR_NUMBER: $PR_NUMBER"
          echo "TARGET_BRANCH: $TARGET_BRANCH"
          echo "PR_HEAD_REF: $PR_HEAD_REF"
          
          # Fetch all refs, including PR refs
          git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*
          
          # Checkout the target release branch
          git checkout $TARGET_BRANCH
          
          # Create a new branch for the cherry-pick
          NEW_BRANCH_NAME="cherry-pick-pr-${PR_NUMBER}-to-${TARGET_BRANCH}"
          git checkout -b $NEW_BRANCH_NAME
          
          # Cherry-pick the latest commit from the PR
          git cherry-pick $PR_HEAD_REF
          
          # Push the new branch
          git push origin $NEW_BRANCH_NAME

      - name: Create a cherry-pick PR
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          branch: $NEW_BRANCH_NAME
          title: "Cherry-pick PR #${{ github.event.issue.number }} to ${{ steps.comment-check.outputs.branch }}"
          body: "This is an automated cherry-pick of PR #${{ github.event.issue.number }} to the ${{ steps.comment-check.outputs.branch }} branch."
          base: ${{ steps.comment-check.outputs.branch }}

      - name: Add comment to original PR
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ github.event.issue.number }};
            const cherryPickPrUrl = `https://github.com/${{ github.repository }}/pull/${{ steps.create_pr.outputs.pull_request_number }}`;
            github.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Cherry-pick PR created: ${cherryPickPrUrl}`
            });
